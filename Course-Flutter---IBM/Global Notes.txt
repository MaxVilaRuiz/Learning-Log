To start a Flutter project:
    1. To enable web development in Flutter run:
        > flutter config --enable-web
    2. Verify that Flutter recognized the web enviroment by running (you should see "Chrome (web)" as one of the devices of the output. If it don't appear, install Google Chrome):
        > flutter devices
    3. Run flutter doctor to verify whether "Flutter", "Chrome" and "Connected Devices" are checked by running:
        > flutter doctor
    4. To create a new Flutter project run:
        > flutter create <name_of_the_project>
    5. To update all libraries run:
        > flutter pub get

To run a Flutter project run:
    > flutter run -d <platform>
    Ex: > flutter run -d chrome

IDEs:
    VSCode: intuitive, rich debugging, extensions...
    Android Studio: Advanced code editing, robust debugging tools, project wizard and templates...
    IntellJ IDEA: similar to Android Studio

Other commands:
    * Verify that Dart is installed run:
        > dart --version
    * Run a .dart doc:
        > dart <name_of_the_doc>.dart
    * To list the dart commands run:
        > dart
    * To add new dependencies to your project run:
        > dart pub add <name_of_the_dependecy>
    * To update the dependencies of your project run:
        > dart pub upgrade 
    * To install all dependencies listed in the pubspec.yaml file run:
        > dart pub get
    
Third-party tools:
    - Useful to enhace the efficiency and productivity
    - Shell scripting: automates repetitive tasks by writing shell scripts
    - Makefiles: allows defining rules to build and manage project
    - Continuous integration (CI): ensures code is always in a deployable state   

Libraries:
    - To import a library type `import 'dart:<name_of_the_library>` at the beginning of the doc
    - Common libraries: math, async, convert, http package, intl package, path package
    - To create a library:
        1. Create a doc (ex: math_utils.dart)
        2. Type `library <name_of_the_doc>;` at the beginning of the doc
        3. Add the content (functions, variables, classes...)
        4. Import your library with `import '<name_of_the_doc>;` in another doc to use it.

Firebases:
    Useful for all the services that can use with it, such as: user authentication, cloud firestore, cloud storage, firebase analytics, firebases cloud messages... (use firebase for best practises)
    1. Create a new Firebase project:
        - Go to the Firebase console
        - Click 'Add project'
        - Set up a project & proceed to the project dashboard
    2. Add your app to the project:
        - Click the Android or iOS icon
        - Provide a package name (Android) or bundle ID (iOS)
        - Download google-services.json (Android) or GoogleService-Info.plist (iOS) and add to your project
    3. Configure your Flutter project
        - Add dependencies
        - Initialize Firebase in your app
        - Connect your app to the Firebase project

Publishing an App:
    * Android:
        1. Identify as a developer in the Play Store platform
        2. Generate a keystore:
            >  keytool -genkey -v -keystore release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key
            - Save the password used
            - Open the android/app/build.gradle file:
                android {
                    ...
                    defaultConfig { ... }
                    signingConfigs {
                        release {
                            keyAlias 'my-key-alias'
                            keyPassword 'your-key-password'
                            storeFile file('your-keystore-path/my-release-key.jks')
                            storePassword 'your-keystore-password' // Usually same as keyPassword
                        }
                    }
                    buildTypes {
                        release {
                            signingConfig signingConfigs.release
                        }
                    }
                }
        3. Building the release version: `flutter build apk -release`
        4. Set up your app in the Google Play Console
        5. Upload the Android App Bundle
        6. Conduct pre-launch testing
        7. Use the Play Console for post-release management

    * iOS: 
        1. Identify as a developer in the App Store platform
        2. Set up your app in App Store Connect
        3. Prepare your app for submission:
            - Open Xcode and archive your app by going to Product > Archive.
            - Once the archive is complete, click on "Distribute App" and select "App Store Connect".
            - Follow the prompts to upload the app binary to App Store Connect.
        4. Submit your app for review 
        5. Use App Store Connect analytics for post-release management
        ( For building the release version: `flutter build appbundle -release` )

Google Analytics:
    - Very useful to have a constant track and information about your app users. With this information, you can enhace the app by improving the most liked sections and refactor the most unliked...

    - To implement Google Analytics to your project:
        1. Add Firebase to your project
        2. Add firebase_analytics to pubspec.yaml:
            - Modify the .yaml file and run `flutter pub get`:
                dependencies:
                    firebase_core: latest_version
                    firebase_analytics: latest_version
            - Or run:
                > flutter pub add firebase_core
                > flutter pub add firebase_analytics            
        3. Update the main.dart file:
            void main() async {
                WidgetsFlutterBinding.ensureInitialized(); // Initialize the Flutter framework
                await Firebase.initializeApp(); // Initialize a Firebase instance
                runApp(MyApp());
            }