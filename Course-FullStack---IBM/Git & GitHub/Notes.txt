ðŸ”¹ Basic Shell Commands
These commands help navigate and manage files in the terminal:
    â€¢	mkdir NameOfTheFolder â†’ Create a new folder named NameOfTheFolder.
    â€¢	touch NameOfTheDocument â†’ Create a new file named NameOfTheDocument.
    â€¢	cd NameOfTheFolder â†’ Navigate into the folder NameOfTheFolder.
    â€¢	ls â†’ List all files and folders in the current directory.

ðŸ”¹ Installation
	â€¢	GitHub for Windows: https://windows.github.com
	â€¢	GitHub for Mac: https://mac.github.com
	â€¢	Git for All Platforms: http://git-scm.com

ðŸ”¹ Initial Configuration (Tooling)
Configure user information for all local repositories:
    git config --global user.name "[name]"
    git config --global user.email "[email]"
    git config --global color.ui auto

ðŸ”¹ Create Repositories
    â€¢ Initialize a new repository in the current directory:
        git init
    â€¢ Clone an existing repository from GitHub:
        git clone [url]

ðŸ”¹ The .gitignore File
Use .gitignore to exclude files from being tracked by Git.
Helpful templates available at: github.com/github/gitignore

ðŸ”¹ Working with Files and Changes
    â€¢ Add specific file changes to the staging area:
        git add NameOfTheDocument
    â€¢ Add all modified files:
        git add .
    â€¢ Commit staged changes with a message:   
        git commit -m "Description of the commit"
    â€¢ View repository status:
        git status
    â€¢ View commit history:
        git log
        git log --follow [file]
    â€¢ Show differences between working directory and last commit:
        git diff
        git diff Branch1 Branch2
    â€¢ Show details of a specific commit:
        git show [commit]

ðŸ”¹ Branches
    â€¢ List existing branches:
        git branch
    â€¢ Create a new branch:
        git branch [branch-name]
    â€¢ Switch to another branch:
        git checkout [branch-name]
    â€¢ Merge changes from one branch into another (checkout to target branch first):
        git merge [branch-name]
    â€¢ Delete a branch:
        git branch -d [branch-name]

ðŸ”¹ Synchronize Changes with Remote
    â€¢ Download history from remote branches:
        git fetch
    â€¢ Merge remote changes into local branch:
        git merge
    â€¢ Temporarily save uncommitted changes to clean the working directory:
        git stash
    â€¢ Reapply the last stashed changes after pulling or merging:
        git stash pop
    â€¢ Pull changes (fetch + merge || stash + pull + stash pop):
        git pull
    â€¢ Push local commits to a specific branch:
        git push origin [branch-name]

ðŸ”¹ Undo and Redo Commits
    â€¢ Undo commits after a specific one (preserve local changes): 
        git reset [commit]
    â€¢ Discard all history and reset to a specific commit:
        git reset --hard [commit]
    â€¢ Discard all uncommitted changes and return to last commit:
        git reset --hard
    â€¢ Revert last commit (create a new commit that undoes changes):
        git revert

ðŸ”¹ GitHub Flow
A simple branching workflow:
	1.	Create a feature branch from master.
	2.	Make commits on the feature branch.
	3.	Submit a Pull Request.
	4.	Discuss proposed changes, review, and make further commits.
	5.	Merge the feature branch into master.

ðŸ”¹ Glossary
	â€¢	git â†’ Open-source, distributed version-control system.
	â€¢	GitHub â†’ Platform for hosting and collaborating on Git repositories.
	â€¢	commit â†’ A snapshot of repository changes compressed into a SHA.
	â€¢	branch â†’ A lightweight movable pointer to a commit.
	â€¢	clone â†’ Local copy of a repository including commits and branches.
	â€¢	remote â†’ Shared repository on GitHub used by all team members.
	â€¢	fork â†’ A copy of a repository on GitHub under a different user.
	â€¢	pull request â†’ A place to review, compare, and discuss branch changes.
	â€¢	HEAD â†’ Represents the current working directory; can move to commits, branches, or tags using git checkout.